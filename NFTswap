// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./ERC721.sol";
import "./IERC721Receiver.sol";

contract NFTswap is IERC721Receiver{

    event List(address indexed seller, address indexed nftAddr, uint256 indexed tokenId, uint256 price); // 记录卖家挂单list
    event Purchase(address indexed buyer, address indexed nftAddr, uint256 indexed tokenId, uint256 price); // 记录买家购买list
    event Revoke(address indexed seller, address indexed nftAddr, uint256 indexed tokenId); // 卖家撤单记录
    event Update(address indexed seller, address indexed nftAddr, uint256 indexed tokenId, uint256 newPrice); // 卖家修改记录

    // 定义订单数据结构体
    struct Order{
        address owner;
        uint256 price;
    }

    // 记录了订单对应的NFT系列（合约地址）和tokenId信息
    mapping(address => mapping(uint256 => Order)) public nftList;

    fallback() external payable{}
    receive() external payable{}


    // 挂单：卖家上架NFT，合约地址为_nftAddr, tokenId为_tokenId, 价格_price为以太坊（单位是wei）
    function list(address _nftAddr, uint256 _tokenId, uint256 _price) public {
        IERC721 _nft = IERC721(_nftAddr); // 声明IERC721接口合约变量

        require(_nft.getApproved(_tokenId) == address(this), "Need Approval"); // 合约得到授权
        require(_price > 0); // 价格大于0

        Order storage _order = nftList[_nftAddr][_tokenId]; 
        //Order storage _order;
        _order.owner = msg.sender;
        _order.price = _price;  // 设置NFT持有人和价格
       // nftList[_nftAddr][_tokenId] = _order;  

        _nft.safeTransferFrom(msg.sender, address(this), _tokenId); 
        emit List(msg.sender, _nftAddr, _tokenId, _price);
    }

    // 购买：卖家购买NFT，合约为_nftAddr, tokenId为_tokenId, 调用函数式要附带ETH
    function purchase(address _nftAddr, uint256 _tokenId, uint256 _price) payable public {
        Order storage _order = nftList[_nftAddr][_tokenId]; // 获取卖家地址和价格
        require(_order.price > 0, "Invalid Price");  // NFT价格大于0
        require(_price >= _order.price, "Increase price"); // 购买价格大于等于标价

        IERC721 _nft = IERC721(_nftAddr);
        require(_nft.ownerOf(_tokenId) == address(this), "Invalid Order"); // 检查NFT是否在合约中

        // 将NFT转给买家
        _nft.safeTransferFrom(address(this), msg.sender, _tokenId);
        // 将ETH转给卖家，多余的ETH退回买家
        payable(msg.sender).transfer(msg.value - _order.price); 
        payable(_order.owner).transfer(_order.price);

        delete nftList[_nftAddr][_tokenId];
        emit Purchase(msg.sender, _nftAddr, _tokenId, msg.value);
    }

    // 撤单：卖家取消挂单
    function revoke(address _nftAddr, uint256 _tokenId) public {
        Order storage _order = nftList[_nftAddr][_tokenId]; // 获取卖家地址和价格
        require(_order.owner == msg.sender, "Not Owner");
        IERC721 _nft = IERC721(_nftAddr); 
        require(_nft.ownerOf(_tokenId) == address(this), "Invalid Order"); // NTF在合约中

        //将NFT转回给卖家
        _nft.safeTransferFrom(address(this), msg.sender, _tokenId);
        delete nftList[_nftAddr][_tokenId]; // 删除卖家信息
        emit Revoke(msg.sender, _nftAddr, _tokenId);
    }

    // 调整价格： 卖家调整挂单价格
    function update(address _nftAddr, uint256 _tokenId, uint256 _newPrice) public {
        require(_newPrice >= 0, "Invalid Price");
        Order storage _order = nftList[_nftAddr][_tokenId]; // 取得卖家信息
        require(_order.owner == msg.sender, "Not Owner"); // 必须由持有人发起
        IERC721 _nft = IERC721(_nftAddr);
        require(_nft.ownerOf(_tokenId) == address(this), "Invalid Order"); // nft在合约中
        // 调整NFT价格
        _order.price = _newPrice;
        emit Update(msg.sender, _nftAddr, _tokenId, _newPrice);

    }

    // 实现IERC721Receiver的onERC721Received，能够接收ERC721代币
    function onERC721Received(address operator, address from, uint tokenId, bytes calldata data) external returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }



}

