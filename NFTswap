// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./IERC721.sol";
import "./IERC165.sol";
import "./IERC721Receiver.sol";
import "./Address.sol";

contract ERC721 is IERC721 {

    string public name; // Token名称
    string public symbol; // token代号

    mapping(uint => address) private _owners; // tokenId 到 owner address 的持有人映射
    mapping(address => uint) private _balances; //address 到 持仓数量 的映射
    mapping(uint => address) private _tokenApprovals; // tokenId 到 授权地址 的授权映射
    mapping(address => mapping(address => bool)) private _operatorApprovals; // owner地址 到 operator地址 的批量授权映射

    // 构造函数 初始化name和symbol
    constructor(string memory name_, string memory symbol_) {
        name = name_;
        symbol = symbol_;
    } 

    // 实现IERC165的接口查询
    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {
        return 
        interfaceId == type(IERC721).interfaceId ||
        interfaceId == type(IERC165).interfaceId;   
    }

    // 实现IERC721的balanceOf，利用_balances变量查询owner地址的balance。
    function balanceOf(address owner) external view override returns (uint256 balance) {
        require(owner != address(0), "zero address"); 
        require(!Address.isContract(owner), "is contract address");
        return _balances[owner];
    }

    // 实现IERC721的ownerOf，利用_owners变量查询tokenId的owner。
    function ownerOf(uint tokenId) public view override returns (address owner) {
         owner = _owners[tokenId];
         require(owner != address(0),"token dosn't exist"); 
         require(!Address.isContract(owner), "is contract address");
    }

    // 实现IERC721的isApprovesForAll，利用_operatorApprovals变量查询owner地址是否将所持的NFT批量授权给了operator地址
    function isApprovedForAll(address owner, address operator) external view override returns (bool) {
        return _operatorApprovals[owner][operator]; // 
    }

    // 实现IERC721的setApprovalForAll，将持有的NFT全部授权给operator地址
    function setApprovalForAll(address operator, bool approved) external override {
        _operatorApprovals[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }

    // 实现IERC721的getApproved，利用_tokenApprovals变量查询tokenID的授权地址
    function getApproved(uint tokenId) external view override returns (address) {
        require(_owners[tokenId] != address(0),"token dosn't exist");
        return _tokenApprovals[tokenId];
    }

    // 授权函数，通过调整_tokenApprovals来授权to地址才做tokenId，同时释放Approval事件
    function _approve(address owner, address to, uint tokenId) private {
        _tokenApprovals[tokenId] = to;
        emit Approval(owner, to, tokenId);
    }
    
    // 实现IERC721的approve，将tokenId授权给to地址
    function approve(address to, uint tokenId) external override {
        address owner = _owners[tokenId];
        require(msg.sender == owner || _operatorApprovals[owner][msg.sender],"not owner or approved for all"); 
    }

    // 查询spender地址是否可以使用tokenId（需要是owner或被授权地址）
    function _isApprovedOrOwner(address owner, address spender, uint tokenId) private view returns (bool) {
        return (spender == owner || _tokenApprovals[tokenId] == spender || _operatorApprovals[owner][spender]);
    }

    // 转账函数，通过调整_balances和_owner变量将tokenId从from转账给to，同时释放Transfer事件，条件：tokenId被from拥有，to不是0地址
    function _transfer(address owner, address from, address to, uint tokenId) private {
        require(from == owner, "not owner");
        require(to != address(0),"transfer to the zero address");

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    // 实现IERC721的transferFrom，非安全转账，不建议使用
    function transferFrom(address from, address to, uint tokenId) external override {
        address owner = ownerOf(tokenId);
        require(_isApprovedOrOwner(owner, msg.sender, tokenId),"not owner or approved");
        _transfer(owner, msg.sender, to, tokenId);
    }

    // 用于在to为合约的时候调用IERC721Receiver.onERC721Received，以防止tokenId被不小心转入黑洞
    function _checkOnERC721Received(address from, address to, uint tokenId, bytes memory _data) private returns (bool) {
       if(Address.isContract(to)) {
           return IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) == IERC721Receiver.onERC721Received.selector; 
       } else {
           return true;
       }
    }

    function _safeTransfer(address owner, address from, address to, uint tokenId, bytes memory _data) private {
        _transfer(owner, from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data),"not ERC721Receiver");
    }

    // 实现ERC721的安全转账
    function safeTransferFrom(address from, address to, uint tokenId, bytes memory _data) external override {
        address owner = ownerOf(tokenId);
        require(_isApprovedOrOwner(owner, msg.sender, tokenId),"not owner or approved");
        _safeTransfer(owner, from, to, tokenId, _data);
    }

    function safeTransferFrom(address from, address to, uint tokenId) external override {
        address owner = ownerOf(tokenId);
        require(_isApprovedOrOwner(owner, msg.sender, tokenId),"not owner or approved");
        _safeTransfer(owner, from, to, tokenId, "");
    }

    // mint函数 
    function _mint(address to, uint tokenId) internal {
        require(to != address(0),"mint to zero address");
        require(_owners[tokenId] == address(0),"token already minted");

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    // burn函数 
    function _burn(uint tokenId) internal {
        address owner = ownerOf(tokenId);
        require(msg.sender == owner,"not owner of token");

        _approve(owner, address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }



}
